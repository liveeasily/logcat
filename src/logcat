#!/usr/bin/env python

'''
Created on 2013. 2. 10.

@author: sunjae
'''

from optparse import OptionParser
import sys
import os

option_0 = {'name': ('-s', '--section'), 'help': 'section name', 'nargs': 1}
options = [option_0]

PATH_CONFIG = os.path.join(os.getenv("HOME"), ".android")
FILE_CONFIG = os.path.join(PATH_CONFIG, "logcat.config")

DEFAULT_CONFIG = '''
# This is a config for logcat.

section: default
    #tags=ActivityManager, *:S, .....
end

section: sample
    tags=ActivityManager, AndroidRuntime:*, *:S
end
'''

def _MakeDeafultConfig():
    f = open(FILE_CONFIG, "w")
    f.write(DEFAULT_CONFIG)
    f.close()
    pass

def _GetContentsInSection(section):
    f = open(FILE_CONFIG)
    
    found_section = False
    contents = []
    
    while True:
        line = f.readline()
        if not line:
            break
        
        line = line.replace('\n', '')
        line = line.replace(' ', '')
        if len(line) < 1 or line.startswith('#'):
            continue
        
        if found_section:
            if line == 'end':
                break
            else:
                contents.append(line.replace('tags=', ''))
        else:
            if line == ("section:%s" % section):
                found_section = True 
            
    f.close()
    return contents
    
def _CheckConfigFile():
    if not os.path.isdir(PATH_CONFIG):
        print "There is no directory for config.. Make it(%s)" % PATH_CONFIG
        os.mkdir(PATH_CONFIG)
        
    if not os.path.isfile(FILE_CONFIG):
        print "There is no config file. Make it(%s)" % FILE_CONFIG
        _MakeDeafultConfig()
       

def main(options, arguments):
    _CheckConfigFile()
 
    filters= _GetContentsInSection("default")
    if options.section:
        filters += _GetContentsInSection(options.section)
        
    filter_spec = ''
    for x in filters:
        for item in x.split(','):
            filter_spec += item + ' '
           
    cmd = "adb logcat %s" % filter_spec
    print cmd
    os.system(cmd)
    
if __name__ == "__main__":
    parser = OptionParser()
    for option in options:
        param = option['name']
        del option['name']
        parser.add_option(*param, **option)

    options, arguments = parser.parse_args()
    sys.argv[:] = arguments
    main(options, arguments)
